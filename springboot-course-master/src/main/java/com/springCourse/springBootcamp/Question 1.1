Behavioral design pattern:
Behavioral Patterns are concerned with the strategy of object collaboration and the delegation of responsibilities among objects.
This pattern characterizes object communication and simplifies the dynamic control flow of object behavior.
Purpose =
Identify common communication patterns among objects. By doing so, these patterns increase flexibility in carrying out communication.

1.Chain of Responsibility:
This pattern promotes decoupling while percolating responsibility from one object to another,
giving an equal chance to every receiving object to handle the request.

2.Command Pattern:
The Command Pattern encapsulates a command as an object so that it can be invoked when required.
The command objects further can be queued or stacked as a batch of commands to revoke or to do an undo operation.

3.Iterator Pattern:
This pattern helps in accessing objects sequentially once they are aggregated as a list of objects.
The real idea of this pattern is that it hides the underlying object representation.
Thus, accessing objects, whether they are represented in a list or trees or any other structure, becomes possible in a common, standard way.

4.Mediator Pattern:
In the Mediator Pattern, when dissimilar classes want to communicate with one another, they do not do it directly.
Rather, they work through a mediator class that, on behalf of both the parties, relays the message.
This promotes loose coupling of objects by restraining objects to refer to each other explicitly.
As a result, the sender and receiver objects can evolve and vary independently.
